/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { GetConfig } from '@google-cloud/common';
declare const common: any;
import { Database, SessionPoolConstructor } from './database';
import { google as instanceAdmin } from '../proto/spanner_instance_admin';
import { Spanner, RequestConfig } from '.';
import { RequestCallback, PagedResponse, LongRunningCallback, NormalCallback, ResourceCallback } from './common';
import { Duplex } from 'stream';
import { SessionPoolOptions, SessionPool } from './session-pool';
import { Operation as GaxOperation } from 'google-gax';
import { google as databaseAdmin } from '../proto/spanner_database_admin';
import { google as spannerClient } from '../proto/spanner';
export declare type IDatabase = databaseAdmin.spanner.admin.database.v1.IDatabase;
export declare type IInstance = instanceAdmin.spanner.admin.instance.v1.IInstance;
export declare type IOperation = instanceAdmin.longrunning.IOperation;
export declare type CreateDatabaseResponse = [Database, GaxOperation, IOperation];
export declare type DeleteInstanceResponse = [instanceAdmin.protobuf.IEmpty];
export declare type ExistsInstanceResponse = [boolean];
export declare type GetInstanceResponse = [Instance, IInstance];
export declare type GetInstanceMetadataResponse = [IInstance];
export interface GetInstanceMetadataOptions {
    fieldNames?: string | string[];
}
export declare type GetDatabasesResponse = PagedResponse<Database, databaseAdmin.spanner.admin.database.v1.IListDatabasesResponse>;
export declare type SetInstanceMetadataResponse = [GaxOperation, IOperation];
export interface CreateDatabaseOptions extends databaseAdmin.spanner.admin.database.v1.ICreateDatabaseRequest {
    poolOptions?: SessionPoolOptions;
    poolCtor?: SessionPool;
    schema?: string;
}
export interface CreateInstanceRequest extends IInstance {
    nodes: number;
}
export interface GetDatabasesRequest extends databaseAdmin.spanner.admin.database.v1.IListDatabasesRequest {
    autoPaginate?: boolean;
    maxApiCalls?: number;
    maxResults?: number;
}
export declare type CreateInstanceCallback = LongRunningCallback<Instance>;
export declare type CreateDatabaseCallback = LongRunningCallback<Database>;
export declare type DeleteInstanceCallback = NormalCallback<instanceAdmin.protobuf.IEmpty>;
export declare type ExistsInstanceCallback = NormalCallback<boolean>;
export declare type GetDatabasesCallback = RequestCallback<Database, databaseAdmin.spanner.admin.database.v1.IListDatabasesResponse>;
export declare type GetInstanceCallback = ResourceCallback<Instance, IInstance>;
export declare type GetInstanceMetadataCallback = NormalCallback<IInstance>;
export declare type SetInstanceMetadataCallback = ResourceCallback<GaxOperation, IOperation>;
export interface GetInstanceConfig extends GetConfig, GetInstanceMetadataOptions {
}
interface InstanceRequest {
    (config: RequestConfig, callback: ResourceCallback<GaxOperation, IOperation>): void;
    <T>(config: RequestConfig, callback: RequestCallback<T>): void;
}
/**
 * The {@link Instance} class represents a [Cloud Spanner
 * instance](https://cloud.google.com/spanner/docs/instances).
 *
 * Create an `Instance` object to interact with a Cloud Spanner instance.
 *
 * @class
 *
 * @param {Spanner} spanner {@link Spanner} instance.
 * @param {string} name Name of the instance.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 * const instance = spanner.instance('my-instance');
 */
declare class Instance extends common.GrpcServiceObject {
    formattedName_: string;
    request: InstanceRequest;
    requestStream: (config?: RequestConfig) => Duplex;
    databases_: Map<string, Database>;
    metadata?: IInstance;
    constructor(spanner: Spanner, name: string);
    createDatabase(name: string, options?: CreateDatabaseOptions): Promise<CreateDatabaseResponse>;
    createDatabase(name: string, callback: CreateDatabaseCallback): void;
    createDatabase(name: string, options: CreateDatabaseOptions, callback: CreateDatabaseCallback): void;
    /**
     * Get a reference to a Database object.
     *
     * @throws {Error} If a name is not provided.
     *
     * @param {string} name The name of the instance.
     * @param {SessionPoolOptions|SessionPoolCtor} [poolOptions] Session pool
     *     configuration options.
     * @param {spannerClient.spanner.v1.ExecuteSqlRequest.IQueryOptions} [queryOptions]
     *     Default query options to use with the database. These options will be
     *     overridden by any query options set in environment variables or that
     *     are specified on a per-query basis.
     * @return {Database} A Database object.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     * const database = instance.database('my-database');
     */
    database(name: string, poolOptions?: SessionPoolOptions | SessionPoolConstructor, queryOptions?: spannerClient.spanner.v1.ExecuteSqlRequest.IQueryOptions): Database;
    delete(): Promise<DeleteInstanceResponse>;
    delete(callback: DeleteInstanceCallback): void;
    exists(): Promise<ExistsInstanceResponse>;
    exists(callback: ExistsInstanceCallback): void;
    get(options?: GetInstanceConfig): Promise<GetInstanceResponse>;
    get(callback: GetInstanceCallback): void;
    get(options: GetInstanceConfig, callback: GetInstanceCallback): void;
    getDatabases(query?: GetDatabasesRequest): Promise<GetDatabasesResponse>;
    getDatabases(callback: GetDatabasesCallback): void;
    getDatabases(query: GetDatabasesRequest, callback: GetDatabasesCallback): void;
    getMetadata(options?: GetInstanceMetadataOptions): Promise<GetInstanceMetadataResponse>;
    getMetadata(callback: GetInstanceMetadataCallback): void;
    getMetadata(options: GetInstanceMetadataOptions, callback: GetInstanceMetadataCallback): void;
    setMetadata(metadata: IInstance): Promise<SetInstanceMetadataResponse>;
    setMetadata(metadata: IInstance, callback: SetInstanceMetadataCallback): void;
    /**
     * Format the instance name to include the project ID.
     *
     * @private
     *
     * @param {string} projectId The project ID.
     * @param {string} name The instance name.
     * @returns {string}
     *
     * @example
     * Instance.formatName_('grape-spaceship-123', 'my-instance');
     * // 'projects/grape-spaceship-123/instances/my-instance'
     */
    static formatName_(projectId: string, name: string): string;
}
/**
 * Reference to the {@link Instance} class.
 * @name module:@google-cloud/spanner.Instance
 * @see Instance
 */
export { Instance };
